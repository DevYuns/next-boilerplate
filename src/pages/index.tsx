import {Suspense, useEffect} from 'react';
import {usePreloadedQuery, useQueryLoader} from 'react-relay';

import Head from 'next/head';
import type {PreloadedQuery} from 'react-relay';
import type {ReactElement} from 'react';
import type {UserQuery} from '@/__generated__/UserQuery.graphql';
import styled from '@emotion/styled';
import {userQuery} from '@/relay/queries/User';

const Container = styled.div`
  height: 100%;

  display: flex;
  align-items: center;
  justify-content: center;
`;

type Props = {
  queryReference: PreloadedQuery<UserQuery, Record<string, unknown>>;
};

function Page({queryReference}: Props): ReactElement {
  const response = usePreloadedQuery<UserQuery>(userQuery, queryReference);

  return (
    <div>
      <p>Hello User</p>
      <p>{response.user?.email}</p>
    </div>
  );
}

export default function PageRoot(): ReactElement {
  const [queryReference, loadQuery, disposeQuery] =
    useQueryLoader<UserQuery>(userQuery);

  useEffect(() => {
    loadQuery({id: 'cldr3sm0y00008bajaxaxplo8'});

    return () => {
      disposeQuery();
    };
  }, [disposeQuery, loadQuery]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Suspense fallback={<div>loading...</div>}>
          {queryReference && <Page queryReference={queryReference} />}
        </Suspense>
      </Container>
    </>
  );
}
